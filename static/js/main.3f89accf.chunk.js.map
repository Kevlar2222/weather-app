{"version":3,"sources":["clouds.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","cityText","city","temperature","weatherMain","getData","bind","cityChange","fetch","data","json","readable","this","setState","main","temp","weather","description","console","log","dataRequest","usable","cod","name","event","target","value","id","className","type","onChange","onClick","Math","round","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,oC,6IC4E5BC,G,8DAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,KAAM,SACNC,YAAa,GACbC,YAAa,IAEf,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATD,E,2MAaEE,MACf,sG,cADEC,E,gBAGiBA,EAAKC,O,OAAtBC,E,OACJC,KAAKC,SAAS,CAAEV,YAAaQ,EAASG,KAAKC,OAC3CH,KAAKC,SAAS,CAAEG,QAASL,EAASK,QAAQ,GAAGC,cAC7CL,KAAKC,SAAS,CAAET,YAAaO,EAASK,QAAQ,GAAGF,O,kDAEjDI,QAAQC,IAAR,M,2RAKwBX,MACtB,qDACEI,KAAKZ,MAAMC,SACX,2C,cAHAmB,E,gBAKeA,EAAYV,O,OACZ,SADfW,E,QACOC,IACTJ,QAAQC,IAAI,2BAEZP,KAAKC,SAAS,CAAEX,KAAMmB,EAAOE,OAC7BX,KAAKC,SAAS,CAAEV,YAAakB,EAAOP,KAAKC,OACzCH,KAAKC,SAAS,CAAEG,QAASK,EAAOL,QAAQ,GAAGC,cAC3CL,KAAKC,SAAS,CAAET,YAAaiB,EAAOL,QAAQ,GAAGF,OAC/CI,QAAQC,IAAIE,I,kDAGdH,QAAQC,IAAR,M,iJAGOK,GACTZ,KAAKC,SAAS,CAAEZ,SAAUuB,EAAMC,OAAOC,U,+BAGvC,OACE,6BACE,yBAAKC,GAAG,YAAYC,UAAWhB,KAAKZ,MAAMI,aACxC,yBAAKwB,UAAU,QACb,2BAAOD,GAAG,QAAQE,KAAK,OAAOC,SAAUlB,KAAKL,aAC7C,8BACA,4BAAQwB,QAASnB,KAAKP,SAAtB,cACA,6BACA,6BACA,6BACA,sCAAYO,KAAKZ,MAAME,MACvB,6CACgB8B,KAAKC,MAAMrB,KAAKZ,MAAMG,YAAc,QAAU,SAE9D,yCAAeS,KAAKZ,MAAMI,oB,GAhEpB8B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3f89accf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clouds.1478c006.jpg\";","import React from \"react\";\nimport \"./App.css\";\nimport Clouds from \"./clouds.jpg\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityText: \"\",\n      city: \"London\",\n      temperature: \"\",\n      weatherMain: \"\", //clear, rain, snow, clouds, extreme, other\n    };\n    this.getData = this.getData.bind(this);\n    this.cityChange = this.cityChange.bind(this);\n  }\n  async componentDidMount() {\n    try {\n      let data = await fetch(\n        \"https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=d681c7020ea993ab41891e2760024057\"\n      );\n      let readable = await data.json();\n      this.setState({ temperature: readable.main.temp });\n      this.setState({ weather: readable.weather[0].description });\n      this.setState({ weatherMain: readable.weather[0].main });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async getData() {\n    try {\n      let dataRequest = await fetch(\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n          this.state.cityText +\n          \"&APPID=d681c7020ea993ab41891e2760024057\"\n      );\n      let usable = await dataRequest.json();\n      if (usable.cod === \"404\") {\n        console.log(\"Error, city not found!\");\n      } else {\n        this.setState({ city: usable.name });\n        this.setState({ temperature: usable.main.temp });\n        this.setState({ weather: usable.weather[0].description });\n        this.setState({ weatherMain: usable.weather[0].main });\n        console.log(usable);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  cityChange(event) {\n    this.setState({ cityText: event.target.value });\n  }\n  render() {\n    return (\n      <div>\n        <div id=\"container\" className={this.state.weatherMain}>\n          <div className=\"flex\">\n            <input id=\"input\" type=\"text\" onChange={this.cityChange}></input>\n            <div></div>\n            <button onClick={this.getData}>Enter City</button>\n            <br></br>\n            <br></br>\n            <br></br>\n            <div>City: {this.state.city}</div>\n            <div>\n              Temperature: {Math.round(this.state.temperature - 273.15) + \"Â°C\"}\n            </div>\n            <div>Weather: {this.state.weatherMain}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}